OME TIFF Example Source Code
============================

This section discusses some common operations related to the OME-TIFF
format, and provides example source code in Java for performing them. We
strongly recommend you read and understand the :doc:`specification` 
before attempting to deploy any of the following code.

-  Extracting a TIFF comment – demonstrates how to extract the OME-XML
   comment from an OME-TIFF file.
-  Modifying a TIFF comment – demonstrates how to modify an OME-XML
   comment within an OME-TIFF file.
-  Converting other formats to OME-TIFF – demonstrates how to convert
   third-party formats to OME-TIFF.
-  Working with OME-XML – demonstrates how to work with OME-XML in
   memory.

The :bf_doc:`Bio-Formats library <about/>`
provides a lot of functionality related to OME-XML and OME-TIFF, to ease
the burden of file format handling and conversions. Rather than offer
source code that performs all of the above actions on its own, we
instead offer examples that utilize Bio-Formats, for more robust and
succinct operation.

Extracting a TIFF comment
-------------------------

To extract a comment from a TIFF file without the aid of a TIFF library,
the following steps are required:

#. Read in the 8-byte header.
#. Determine if the file is a valid TIFF, and if so, whether its byte
   order is big endian or little endian. The first pair of bytes must
   equal "II" (little endian, "Intel") or "MM" (big endian, "Motorola").
   The next pair must equal 42 with the proper endianness.
#. Determine the byte offset into the file of the first IFD. This
   information is stored in bytes 4-7, with the proper endianness.
#. Skip to the first IFD, and read in the IFD's header.
#. Iterate through the directory entries looking for the
   ImageDescription (270) tag.
#. Jump to the offset given by the ImageDescription entry, and read the
   number of bytes indicated by the entry.
#. Convert the bytes to an ASCII string.

The :bf_doc:`Bio-Formats command line
tools <users/comlinetools/>` include a
program, tiffcomment, that performs these steps using the
getComment(String) method of
`TiffParser <http://git.openmicroscopy.org/?p=bioformats.git;a=blob;f=components/bio-formats/src/loci/formats/tiff/TiffParser.java;hb=HEAD>`_.
You can produce a nicely formatted OME-XML string from an OME-TIFF file
with:

::

    tiffcomment file.ome.tif | xmlindent

Modifying a TIFF comment
------------------------

Modifying a TIFF comment can be tricky because the length of the altered
OME-XML string is unlikely to be the same as before. As such, the IFD's
ImageDescription directory entry must be updated to reflect the new byte
count. In addition, if the string is longer than before, it will no
longer fit at its old offset, unless the comment was at the end of the
file, so the entry's offset might need to change as well.

The ``TiffSaver.overwriteIFDValue()`` method within Bio-Formats, efficiently 
alters a directory entry with a minimum of waste. The count field of the entry 
is intelligently updated to match the new length. If the new length is longer 
than the old length, it appends the new data to the end of the file and 
updates the offset field; if not, or if the old data is already at the end of
the file, it overwrites the old data in place.

The following program extracts comments from TIFF files, prompts the
user to alter the comments on the command line, and writes updated
comments back to the files. It requires the
:bf_plone:`Bio-Formats library <>`.

`EditTiffComment.java <http://git.openmicroscopy.org/?p=bioformats.git;a=blob;f=components/bio-formats/utils/EditTiffComment.java;hb=HEAD>`_

The comment string is acquired using ``TiffParser.getComment(f)``, and
updated with ``TiffSaver.overwriteComment(f, xml)``.

To quickly edit an OME-TIFF files comment on the command line use
``tiffcomment -edit filename.ome.tiff`` from the 
:bf_doc:`Bio-Formats tools <users/comlinetools/index>`.

Converting other formats to OME-TIFF
------------------------------------

One of the major goals of Bio-Formats is to standardize the metadata
from all supported third-party formats into OME-XML. Doing so makes
conversion to OME-TIFF very straightforward—just write the pixels to
TIFF however you want (e.g. with libtiff), and store the converted
OME-XML metadata into the TIFF comment. The complicated part is doing
the conversion from proprietary third-party metadata into OME-XML—a task
that Bio-Formats greatly simplifies.

The following program converts the files given on the command line into
OME-TIFF format. It requires the :bf_plone:`Bio-Formats <>` and :doc:`OME-XML
Java </ome-xml/java-library>` libraries.

`ConvertToOmeTiff.java <http://git.openmicroscopy.org/?p=bioformats.git;a=blob;f=components/bio-formats/utils/ConvertToOmeTiff.java;hb=HEAD>`_

The code functions by creating an ImageReader for reading the input
files' image planes sequentially, and an OMETiffWriter for writing the
planes to OME-TIFF files on disk. The OME-XML is generated by attaching
an OMEXMLMetadata object to the reader, such that when each file is
initialized, the object (at heart an XML DOM object in memory) is
automatically populated with the converted metadata. The OMEXMLMetadata
object is then fed to the OMETiffWriter, which extracts the appropriate
OME-XML string and embeds it into the OME-TIFF file properly.

While our ultimate goal is for the Bio-Formats metadata conversion
facility to be a reference implementation for conversion of third-party
formats into OME-XML and OME-TIFF, please be aware that the current code
is a work in progress. We would greatly value suggestions and assistance
regarding the OME-XML conversion relating to any specific format. If
there is any metadata missing or converted incorrectly, please let us
know.

Working with OME-XML
--------------------

In some cases, it is useful to extract specific parameters or tweak
certain values in a dataset's OME-XML metadata block. While working with
XML is a major topic unto itself, here we provide a brief example of the
OMEXMLMetadata class (which implements the MetadataStore and
MetadataRetrieve interfaces) to greatly simplify OME-XML-related
development tasks.

The following program edits the "image name" metadata value for the file
given on the command line. It requires the :bf_plone:`Bio-Formats <>` and 
:doc:`OME-XML Java </ome-xml/java-library>` libraries.

`EditImageName.java <http://git.openmicroscopy.org/?p=bioformats.git;a=blob;f=components/bio-formats/utils/EditImageName.java;hb=HEAD>`_

As in the ConvertToOmeTiff.java example above, we attach an OME-XML
MetadataStore object to the reader to extract OME-XML metadata from the
input file. We obtain the current image name (if any) by calling the
``omexmlMeta.getImageName(0)`` method. The zero indicates the Image within
the OME-XML block we are interested in; in this case, we are
asking for the name of the first Image.

After updating the name somehow (in our case, reversing the string), we
write the updated name back into the metadata structure via a call to
``omexmlMeta.setImageName(name, 0)``. Once again the zero indicates that we
wish to update the first Image.

Lastly, the
`loci.formats.services.OMEXMLService <http://git.openmicroscopy.org/?p=bioformats.git;a=blob;f=components/bio-formats/src/loci/formats/services/OMEXMLService.java;hb=HEAD>`_
class contains a number of useful methods for working with Bio-Formats
metadata objects (i.e. MetadataStore and MetadataRetrieve
implementations), including the getOMEXML method for easily extracting
an OME-XML string from a MetadataRetrieve object (which we utilize
above), as well as the convertMetadata method for transcoding between
metadata object implementations. You can obtain an OMEXMLService object
as follows:

::

    ServiceFactory factory = new ServiceFactory();
    OMEXMLService service = factory.getInstance(OMEXMLService.class);



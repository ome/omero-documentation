WebGateway
==========

WebGateway is a Django app within the |OmeroWeb|. 
It provides a web API for rendering images and accessing data
on the OMERO server via urls. It also provides methods for creating or
retrieving an OMERO server connection (see :ref:`Gettingaconnection`).

Web services
------------

This list of urls below may be incomplete or out of date. For a complete
list of urls, see the latest API, :javadoc:` latest
API <epydoc/omeroweb.webgateway.urls-module.html>`
and try the urls out for yourself!

The http request will need to include login details for creating or
using a current server connection. This will be true for any request
made after logging in to the server, E.g. Login using webclient or
webadmin login pages then go to webgateway/... E.g, if you have logged
in to a server at
`http://ome.example.com/webclient <http://ome.example.com/webclient>`_ then go to
E.g.
`http://ome.example.com/webgateway/render\_image/ <http://ome.example.com/webgateway/render_image/>`_\ <imageid>/<z>/<t>/

.. figure:: /images/webgateway-render-image.jpg
  :align: center
  :alt: Rendered image

  Rendered image

.. figure:: /images/webgateway-render-split-channel.jpg
  :align: center
  :alt: Rendered split channel image

  Rendered split channel image

.. figure:: /images/webgateway-render-row-plot.png
  :align: center
  :alt: Rendered row plot

  Rendered row plot

.. figure:: /images/webgateway-render-col-plot.png
  :align: center
  :alt: Rendered column plot

  Rendered column plot

.. figure:: /images/webgateway-thumbnail.jpg
  :align: center
  :alt: Rendered thumbnail

  Rendered thumbnail


Image viewer
~~~~~~~~~~~~

-   Provides a full image viewer, with controls for scrolling Z & T, editing
    rendering settings etc.

    ::
    
        webgateway/img_detail/<imageid>/



Images
~~~~~~

-  Returns a jpeg of the specified plane with current rendering settings

   ::

       webgateway/render_image/<imageid>/<z>/<t>/

-  Makes a jpeg laying out each active channel in a separate panel

   ::

       webgateway/render_split_channel/<imageId>/<z>/<t>/

-  Plots the intensity of a row of pixels in an image. w is line width

   ::

       webgateway/render_row_plot/<imageId>/<z>/<t>/<y>/<w>

-  Plots the intensity of a column of pixels in an image.

   ::

       webgateway/render_col_plot/<imageId>/<z>/<t>/<x>/<w>/

-  Returns a jpeg of a thumbnail for an image. w and h are optional
   (default is 75). Specify just one to retain aspect ratio

   ::

       webgateway/render_thumbnail/<imageId>/<w>/<h>

Rendering
~~~~~~~~~

If no rendering settings are specified (as above), then the current
rendering settings will be used. To apply different settings to images
returned by the render\_image and render\_split\_channels urls,
parameters can be specified in the request. N.B. These settings are only
applied to the rendered image and will not be saved unless specified.

Individual parameters are:

-  Channels on/off. E.g. For a 4 channel image, to turn on all channels
   except 2:

   ::

       ?c=1,-2,3,4

-  Channel colour. E.g. To set the colours for channels 1 to red and 2
   to green and 3 to blue:

   ::

       ?c=1|$FF0000,2|$00FF00,3|$0000FF

-  Rendering levels. E.g. To set the cut-in and cut-out values for 3
   channels.

   ::

       ?c=1|400:505,2|463:2409,3|620:3879

-  Z-projection. Maximum intensity, Mean intensity or None (normal)

   ::

       ?p=intmax 
       ?p=intmean
       ?p=normal

-  Rendering 'Mode': greyscale or colour.

   ::

       ?m=g    # greyscale (only the first active channel will be shown in grey)
       ?m=c    # colour

-  Parameters can be combined, E.g.

   ::

       webgateway/render_image/2602/10/0/?c=1|100:505$0000FF,2|463:2409$00FF00,3|620:3879$FF0000,-4|447:4136$FF0000&p=normal

JSON methods
~~~~~~~~~~~~

-  List of projects. E.g
   ``[{"description": "", "id": 269, "name": "Aurora"}, {"description": "", "id": 269, "name": "Drugs"} ]``

   ::

       webgateway/proj/list/

-  Project info
   ``{"description": "", "type": "Project", "id": 269, "name": "CenpA"}``

   ::

       webgateway/proj/<projectId>/detail/    

-  webgateway/proj/<projectId>/children/ - List of Datasets in a Project
   [{"child\_count": 9, "description": "", "type": "Dataset", "id": 270,
   "name": "Control"}, ]
-  webgateway/dataset/<datasetId>/detail/ - Dataset, same as for Project
-  webgateway/dataset/<datasetId>/children/ - Details of Images in the
   dataset
-  webgateway/imgData/<imageId>/ - Lots of metadata for the image. See
   below.
-  webgateway/imgData/<imageId>/<key>/
-  webgateway/search/
-  webgateway/img\_detail/<imageId>/

Saving etc
~~~~~~~~~~

-  webgateway/saveImgRDef/<imageId>/
-  webgateway/resetImgRDef/<imageId>/
-  webgateway/compatImgRDef/<imageId>/
-  webgateway/copyImgRDef/

ImgData
~~~~~~~

The following is sample json data generated by
/webgateway/imgData/<imageId>/

::

    {
    "split_channel": {
        "c": {"width": 1448, "gridy": 2, "border": 2, "gridx": 3, "height": 966}, 
        "g": {"width": 966, "gridy": 2, "border": 2, "gridx": 2, "height": 966}
        }, 
    "rdefs": {"defaultT": 0, "model": "color", "projection": "normal", "defaultZ": 15}, 
    "pixel_range": [-32768, 32767], 
    "channels": [
        {"color": "0000FF", "active": true, 
            "window": {"max": 449.0, "end": 314, "start": 70, "min": 51.0}, "emissionWave": "DAPI", "label": "DAPI"}, 
        {"color": "00FF00", "active": true, 
            "window": {"max": 7226.0, "end": 1564, "start": 396, "min": 37.0}, "emissionWave": "FITC", "label": "FITC"}, 
        {"color": "FF0000", "active": true, 
            "window": {"max": 10662.0, "end": 2798, "start": 533, "min": 0.0}, "emissionWave": "RD-TR-PE", "label": "RD-TR-PE"}, 
        {"color": "FF0000", "active": false, 
            "window": {"max": 8910.0, "end": 4566, "start": 445, "min": 0.0}, "emissionWave": "CY-5", "label": "CY-5"}
        ], 
    "meta": {
        "projectDescription": "", 
        "datasetName": "survivin", 
        "projectId": 2, 
        "imageDescription": "", 
        "imageTimestamp": 1277977808.0, 
        "imageId": 12, 
        "imageAuthor": "Will Moore", 
        "imageName": "CSFV-siRNAi02_R3D_D3D.dv", 
        "datasetDescription": "", 
        "projectName": "siRNAi", 
        "datasetId": 3
    }, 
    "id": 12, 
    "pixel_size": {"y": 0.066309999999999994, "x": 0.066309999999999994, "z": 0.20000000000000001}, 
    "size": {
        "width": 480, 
        "c": 4, 
        "z": 31, 
        "t": 1, 
        "height": 480
    }
    }

.. _Gettingaconnection:

Getting a connection
--------------------

WebGateway method ``getBlitzConnection(request)`` returns an instance of
:javadoc:` BlitzGateway connection <epydoc/omero.gateway._BlitzGateway-class.html>`,
either by creating a connection from the login details in the http
request, or by retrieving an existing connection.

::

    from omeroweb.webgateway.views import getBlitzConnection

    conn = getBlitzConnection (request)

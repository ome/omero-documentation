Writing OMERO.web views
=======================

This page contains info on how to write your own views.py code,
including documentation on the webclient/views.py and
webgateway/views.py code. In general these notes refer to the 4.4 and later
release of OMERO, since the OMERO.web framework will be cleaned up
substantially in this release. We note some points below where these
changes will break existing code.

Although we aim to provide some useful notes and examples here, you will
find the best source of examples is :source:`the code
itself <components/tools/OmeroWeb/omeroweb/webclient/views.py>`.

@Decorators
-----------

Decorators in Python are functions that 'wrap' other functions to
provide additional functionality. They are added above a method using
the @ notation. We use them in the OMERO.web framework to handle common
tasks such as login (getting connection to OMERO server) etc.

@login\_required()
~~~~~~~~~~~~~~~~~~

.. note::

   Before 4.4, this was called @isUserConnected and had similar functionality.

The login\_required decorator uses parameters in the 'request' object to
retrieve an existing connection to OMERO. In the case where the user is
not logged in, they are redirected to a login page. Upon login, they
will be redirected back to the page that they originally tried to view.
The method that is wrapped by this decorator will be passed a 'conn'
Blitz Gateway connection to OMERO.

.. note::

    login\_required is a class-based decorator with several methods
    that can be overwritten to customise it's functionality (see below).
    This means that the decorator **MUST** be instantiated when used with
    the @ notation, ie:

    ::

        @login_required()     NOT  @login_required    # this will give you strange error messages

A simple example of @login\_required() usage (in webtest/views.py). Note
the Blitz Gateway connection "conn" retrieved by @login\_required() is
passed to the function via the optional parameter ``conn=None``.

::

    from omeroweb.decorators import login_required

    @login_required()
    def dataset(request, datasetId, conn=None, **kwargs):
        ds = conn.getObject("Dataset", datasetId)
        return render_to_response('webtest/dataset.html', {'dataset': ds})

.. figure:: /images/web-get-blitz-connection-flow.png
  :align: center
  :alt: Blitz Connection Flow

  Logic flow for retrieving Blitz Gateway connection from http request.

login\_required logic
^^^^^^^^^^^^^^^^^^^^^

The login\_required decorator has some complex connection handling code,
to retrieve or create connections to OMERO. Although it is not necessary
to study the code itself, you may find it useful to understand the logic
that is used (see Flow Diagram). As mentioned above, we start with a
http request (top left) and either a connection is returned (bottom
left) OR we are redirected to login page (right).

.. note:: 
    Options to configure a "public user" are described on the OMERO.web 
    configuration page (see :doc:`Unix </sysadmins/unix/install-web>` or 
    :doc:`Windows </sysadmins/windows/install-web>` version).

Extending login\_required
^^^^^^^^^^^^^^^^^^^^^^^^^

The base login\_required class can be found in omeroweb/decorators.py.
It has a number of methods that can be overwritten to customise or
extend it's functionality. Again, it's best to look at an example of
this. See webclient/decorators.py to see how the base
omeroweb.decorators.login\_required has been extended to configure the
conn connection upon login, handle login failure differently etc.

Style guides
------------

Tips on good practice in views.py methods and their corresponding urls.

-  Include any required arguments in the function parameter list.
   Although many views.py methods use the **kwargs parameter to accept
   additional arguments, it is best not to use this for arguments that
   are absolutely required by the method.**
-  Specify default parameters where possible. This makes it easier to
   reuse the method in other ways.
-  Use keyword arguments in url regular expressions. This makes them
   less brittle to changes in parameter ordering in the views.
-  Similarly, use keyword arguments for urls in templates

   ::

       {% url url_name object_id=obj.id %}

and reverse function:

::

    >>> from django.core.urlresolvers import reverse
    >>> reverse('url_name', kwargs={'object_id': 1})

OMERO.web error handling
------------------------

Django comes with some nice error handling functionality. We have
customised this and also provided some client-side error handling in
Javascript to deal with errors in AJAX requests. This javascript can be
found in the ..?...js code which should be included in all pages that
require this functionality. Errors are handled as follows:

-  404 Simply display a 404 message to the user
-  403 This is 'permission denied' which probably means the user needs
   to login to the server (E.g. session may have timed out). The page is
   refreshed which will redirect the user to login page.
-  500 Server error. We display a feedback form for the user to submit
   details of the error to our QA system - POSTs to
   "qa.openmicroscopy.org.uk:80". This url is configurable in
   settings.py.

In general, you should not have to write your own error handling code in
views.py or client side. The default behavior is as follows:

With Debug: True (during development)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Django will return an html page describing the error, with various
parameters, stack trace etc. If the request was AJAX, and you have our
javascript code on your page then the error will be handled as described
(see above). NB: With Debug True, 500 errors will be returned as html
pages by Django but these will not be rendered as html in our feedback
form. You can use developer tools on your browser (E.g. Firebug on
Firefox) to see various errors and open the request in a new tab to
display the full debug info as html.

With Debug: False (in production)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Django will use it's internal error handling to produce standard 404,
500 error pages. We have customised this behaviour to display our own
error pages. The 500 error page allows you to submit the error as
feedback to our QA system. If the request is AJAX, we return the stack
trace is displayed in a dialog which also allows the error to be
submitted to QA.

Custom error handling
~~~~~~~~~~~~~~~~~~~~~

If you want to handle certain exceptions in particular ways you should
use appropriate try/except statements.

This is only advised for trivial errors, where you can give the user a
simple message, E.g."No Objects selected, Please try again", or if the
error is well understood and you can recover from the error in a
reasonable way.

For 'unexpected' server errors, it is best to allow the exception to be
handled by Django since this will provide a lot more info to the user
(request details etc) and format html etc (both with Debug True or
False).

If you still want to handle the exception yourself, you can provide
stack trace alongside a message for the user. If the request is ajax,
don't return html, since the response text will be displayed in a dialog
box for the user (not rendered as html).

::

    try:
        # something bad happens
    except:
        logger.error(traceback.format_exc())                                    # log the stack trace
        err_msg = "Something bad happened! \n \n%s" % traceback.format_exc()    # message AND stack trace
        if request.is_ajax():
            return HttpResponseServerError(err_msg)
        else:
            ...   # render err_msg with a custom template
            return HttpResponseServerError(content)

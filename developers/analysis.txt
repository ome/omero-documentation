Analysis
========

For all developer tutorials and documentation, please see :doc:`/developers/index`.

OMERO supports analysis via a rich application programming interface
(API), available currently in several languages:
|OmeroJava|, |OmeroCpp|, |OmeroPy|, and |OmeroMatlab| .
These are the same APIs that both the desktop and web clients use to
access your data when stored inside OMERO.

Local analysis
--------------

If you are interested in running your analysis locally and storing the
results to the server, then your first step is to become familiar with
the developer documention.

-  The :doc:`/developers/GettingStarted` provides numerous examples in each 
   language with explanations and tries to be a starting point for anyone who 
   wants to write code which talks to the OMERO server.
-  Most of the :doc:`/developers/Modules/Api` is covered by the
   `Javadocs <http://hudson.openmicroscopy.org.uk/job/OMERO/javadoc/>`_.
-  Each of the languages has extra information on its own page:

   -  |OmeroCpp|
   -  |OmeroJava|
   -  |OmeroMatlab|
   -  |OmeroPy|


Distributed analysis via OMERO.scripts
--------------------------------------

Once you have your local analysis working, you can push it onto the server for 
background processing. 

.. note: Your scripts must either be written in Python or be wrapped with a Python script.

The :javadoc:`OMERO scripting service API <slice2html/omero/api/IScript.html#IScript>` allows Python scripts to be 
uploaded to the server and registered in the server database. These scripts 
can then be called from a client with the scripts running on the server. This 
allows extra functionality to be added to an OMERO server.

Technical info and API details can be found on the 
:doc:`/developers/Modules/Api/ScriptingService` page.

The :doc:`/developers/Modules/Scripts/Guide` should help you get started with 
the scripting service, without going into the 'behind the scenes' details.

Scripts can be run from Insight, using a UI generated from the script. The 
script results can also be handled by Insight, allowing users to view OMERO 
Images or Datasets created by the script, or download files or images.

.. figure:: /images/scripts.png
  :align: center
  :alt: Scripts in Insight

.. figure:: /images/scriptActivity.png
  :align: center
  :alt: Scripts user interface

.. figure:: /images/scriptUI.png
  :align: center
  :alt: Scripts Running and completed

.. _omerotables:

Storing tabular data in OMERO.tables
------------------------------------

The OMERO.tables API unifies the storage of columnar data
from various sources, such as automated analysis results or script-based
processing, and makes them available within OMERO. Often, users look to
store either external data (not in the OME schema) or schema-less data.
:doc:`StructuredAnnotations </developers/Modules/StructuredAnnotations>` are an option
for small quantities of data. Another option is to extend the OME model,
but this risks interoperability issues. (See
:doc:`ExtendingOmero </developers/Server/ExtendingOmero>`). With the OMERO.tables API,
tabular (i.e. spreadsheet-like) data can be stored via named columns,
and retrieved in bulk or via paging. A limited query language provides
basic filtering and selecting.

For installation instructions, see :doc:`/sysadmins/server-tables`


The Interface
~~~~~~~~~~~~~

The :source:`slice definition file <components/blitz/resources/omero/Tables.ice>`
for the OMERO.tables API primarily defines two service interfaces and a type hierarchy:

.. glossary::


   ``omero.grid.Table``
        is the central service for dealing with tabular data.

   ``omero.grid.Tables``
        is an internal service used for managing table
        services, and can be ignored for almost all purposes.

   ``omero.grid.Column``
        is the base class for a number of column types
        which permit returning arrays of columnar values
        (_Ice doesn't provide an "Any" type, so it's
        necessary to group values of the same type.)

   ``omero.grid.WellColumn``
         is an id-based column which references ``omero.model.Well`` instances.

   ``omero.grid.ImageColumn``
         is an id-based column which references ``omero.model.Image`` instances.

   ``omero.grid.RoiColumn``
         is an id-based column which references ``omero.model.Roi`` instances.

   ``omero.grid.LongColumn``
         is a value column with long (non-null) values.

   ``omero.grid.DoubleColumn``
         is a value column with double (non-null) values.

   ``omero.grid.BoolColumn``, etc.
         is a value column with boolean (non-null) values.


Other column types are also available. Further documentation on the API is available in the :jenkins:`javadocs
<job/OMERO/javadoc/slice2html/omero/grid/Table.html#Table>`.  Several
examples are linked below, but these are only the beginning of what
can be done with OMERO.tables.


Examples
~~~~~~~~

-  Hello World:
   :source:`examples/OmeroTables/first.py <examples/OmeroTables/first.py>`
-  Creating a Measurement Table:
   :source:`examples/OmeroTables/MeasurementTable.java <examples/OmeroTables/MeasurementTable.java>`
   (see "Going forward" below)
-  Querying a Table:
   :source:`examples/OmeroTables/FindMeasurements.java <examples/OmeroTables/FindMeasurements.java>`
   (See "Going forward" below)


The Implementation
~~~~~~~~~~~~~~~~~~

Currently, each table is backed by a single HDF table. Since PyTables
(and HDF in the general case) don't support concurrent access, OMERO.tables 
provides a global locking mechanism which permits multiple views of the same 
data. Each "OMERO.tables" file (registered as an ``OriginalFile`` in the 
database), is composed of a single HDF table with any number of certain 
limited column types.

The query language mentioned above is *currently* the PyTables
`condition syntax <http://pytables.github.com/usersguide/condition_syntax.html>`_.
Columns are referenced by name. The following operators are supported:

-  Logical operators: ``&, |, ~``
-  Comparison operators: ``<, <=, ==, !=, >=, >``
-  Unary arithmetic operators: ``-``
-  Binary arithmetic operators: ``+, -, *, /, **, %``

and the following functions:

-  ``where(bool, number1, number2)``: number — number1 if the bool
   condition is true, number2 otherwise.
-  ``{sin,cos,tan}(float|complex)``: float\|complex — trigonometric
   sine, cosine or tangent.
-  ``{arcsin,arccos,arctan}(float|complex)``: float\|complex —
   trigonometric inverse sine, cosine or tangent.
-  ``arctan2(float1, float2)``: float — trigonometric inverse tangent of
   float1/float2.
-  ``{sinh,cosh,tanh}(float|complex)``: float\|complex — hyperbolic
   sine, cosine or tangent.
-  ``{arcsinh,arccosh,arctanh}(float|complex)``: float\|complex —
   hyperbolic inverse sine, cosine or tangent.
-  ``{log,log10,log1p}(float|complex)``: float\|complex — natural,
   base-10 and log(1+x) logarithms.
-  ``{exp,expm1}(float|complex)``: float\|complex — exponential and
   exponential minus one.
-  ``sqrt(float|complex)``: float\|complex — square root.
-  ``{real,imag}(complex)``: float — real or imaginary part of complex.
-  ``complex(float, float)``: complex — complex from real and imaginary
   parts.


Going forward
~~~~~~~~~~~~~

The Tables API itself provides little more than a remotely accessible
store, think of it as a server for Excel-like spreadsheets. We're
currently looking into the facilities that can be built on top of it,
and are **very** open to suggestions. For example, the
:jenkins:`IRoi interface <job/OMERO/javadoc/slice2html/omero/api/IRoi.html#IRoi>`
has been extended to filter ROIs by a given
measurement. This allows seeing only those results from a particular
analysis run. The following example shows how to setup such a
measurement and retrieve its results:

:source:`iroi.py <examples/OmeroTables/iroi.py>`

To see an example of production code that parses out such measurements,
see :source:`populate_roi.py <components/tools/OmeroPy/src/omero/util/populate_roi.py>`.

The IRoi interface has been integrated into the Insight, allowing for
the visualization and export of OMERO.tables:

.. figure:: /images/MeasurementListSep09.png
    :align: center
    :alt: Choice between multiple measurements

    Choice between multiple measurements

.. seealso::

    `PyTables <http://pytables.org>`_
        Software on which OMERO.tables is built.

    `Condition Syntax <http://pytables.github.com/usersguide/condition_syntax.html>`_
        The PyTables condition syntax.

    :source:`Tables.ice <components/blitz/resources/omero/Tables.ice>`
        The API definition for OMERO.tables

    :source:`The Tables test suite <components/tools/OmeroPy/test/tablestest/>`
        The testsuite for OMERO.tables

    :doc:`/sysadmins/server-tables`
        Installation requirements for install OMERO.tables



Third-party analysis and OMERO.tables
-------------------------------------

Support has been added for some third-party analysis data, which gets 
converted in OMERO into a common format. These formats include:

-  MIAS data, measurements, and overlays
-  InCell data and measurements
-  Flex data with Acapella results
   (`screencast <http://cvs.openmicroscopy.org.uk/snapshots/movies/omero-4-1/mov/FlexPreview4.1-import.mov>`_).
   In the Flex case, additional configuration may be necessary for
   accessing both the raw data and the analysis results. Watch `the 
   configuration screencast <http://cvs.openmicroscopy.org.uk/snapshots/movies/omero-4-1/mov/FlexPreview4.1-configuration.mov>`_ for more information.

The analysis results which are parsed out of the formats listed above are 
converted to HDF by the OMERO.tables API. This
facility can then be used by clients to visualize the parsed measurements, and 
in the case of regions of interest, see their location overlayed on the 
associated image:

.. figure:: /images/MeasurementToolSep09.png
  :align: center
  :alt: Measurement Tool


Other high-content screening (HCS) data
---------------------------------------

In addition to the Flex, Mias, and InCell 100 file formats, BD Pathway, 
Olympus ScanR, and native OME-XML/TIFF files files can all be imported as HCS 
data, though without support for any external analysis data which may be 
attached. If you are interested in having other analysis formats supported, 
contact either the :doc:`open source community </users/community-resources>` 
or `Glencoe Software <http://www.glencoesoftware.com>`_ depending on your 
needs.

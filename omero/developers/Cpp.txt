OMERO C++ language bindings
===========================

Using the :zerocdoc:`Ice C++ language mapping
<display/Ice/Hello+World+Application>` from ZeroC_, OMERO provides
native access to your data from C++ code.  `CMake
<http://http://www.cmake.org/>`_ is used for building the C++
bindings.

**Binaries are not provided**, therefore it will be necessary for you
to compile your own. Test versions are, however, built by Jenkins on a
small handful of platforms:

* :jenkins:`Windows Server 2003 (32 bit) <job/OMERO-trunk-components/component=cpp,label=x86-windows/>`
* :jenkins:`Linux <job/OMERO-trunk-components/component=cpp,label=linux/>`
* :jenkins:`MacOSX <job/OMERO-trunk-components/component=cpp,label=macosx/>`

Prerequisites
-------------

* The OMERO source code
* A C++ compiler

  * GCC is recommended for Linux and MacOS X
  * :program:`Visual Studio` or the :program:`Platform SDK` for Windows

* The ZeroC :program:`Ice` libraries, headers and slice definitions
* :program:`cmake`
* Google Test (optional; needed to build the unit and integration tests)

Restrictions
------------

Ice 3.3 and Ice 3.4 will only build with GCC versions *older* than 4.6
(they contain broken headers which newer GCC versions will not parse).
GCC 4.4 is tested and recommended.

Ice 3.5 will build with any GCC version up to 4.8, the latest stable
version; later versions may work, but are untested.

The version of GCC and/or Ice provided on your system should be
compatible, but if you are restricted to a particular version of GCC
or Ice, you may need to obtain or build a compatible version of Ice or
GCC, respectively.

Preparing to build
-------------------

Begin by following the instructions under :doc:`/developers/source_code` on
acquiring the source code. Be **sure** that the git branch you are using
matches the version of your server!

Set the :envvar:`ICE\_HOME` environment variable for your
installation.  This location varies depending upon the installation
location and Ice version in use.  Some possible locations for the
|iceversion| version of Ice follow.  Note these are just examples; you need
to adjust them for the Ice installation path and version in use.

* Ice built from source and installed into :file:`/opt`:

   .. parsed-literal::

       export ICE_HOME=/opt/Ice-|iceversion|

* Ice installed on Linux using RPM packages:

   .. parsed-literal::

       export ICE_HOME=/usr/share/Ice-|iceversion|

* MacOS X with homebrew:

   .. parsed-literal::

       export ICE_HOME=/usr/local/share/Ice-|iceversion|

* Windows using :program:`Visual Studio`:

   .. parsed-literal::

       set ICE_HOME=C:\\Program Files (x86)\\ZeroC\\Ice-|iceversion|

Users of a package manager will also need to set :envvar:`ICE\_HOME`
if the Ice paths are not automatically detected correctly.  The
:program:`slice2xxx` tools will not know the location of the slice
includes if this is left unset.

.. note ::

    If the Ice headers and libraries are not present on the standard
    search paths, these will need to be specified using the
    :envvar:`CMAKE_INCLUDE_PATH` and :envvar:`CMAKE_LIBRARY_PATH`
    environment variables (see below).

Building the library
--------------------

To build the C++ dynamic library on Linux, Unix and MacOS X with :program:`make`:

::

    export ICE_HOME=/path/to/ice
    mkdir omero-build
    cd omero-build
    cmake [cmake options] /path/to/openmicroscopy/components/tools/OmeroCpp
    make

or if you would like to build the C++ tests, you can run:

::

    GTEST_ROOT=/path/to/gtest cmake -Dtest=[TRUE|FALSE] [cmake options] /path/to/openmicroscopy/components/tools/OmeroCpp
    ./build.py test-unit

.. note::

    When :program:`cmake` is run, it will run `./build.py
    build-default` in the openmicroscopy source tree to generate some
    of the C++ and Ice sources.  If you have previously done a build
    by running `./build.py`, this step will be skipped.  However, if
    you have recently switched branches *without cleaning the source
    tree*, please run `./build.py clean` in the source tree to clean
    up all the generated files prior to running :program:`cmake`.

.. note::

    If the build fails with errors such as

    ::

         /usr/include/Ice/ProxyHandle.h:176:13: error: ‘upCast’ was not declared in this scope,
         and no declarations were found by argument-dependent lookup at the point of
         instantiation

    this is caused by the Ice headers being buggy, and newer versions
    of GCC rejecting the invalid code.  To compile in this situation,
    add ``-fpermissive`` to :envvar:`CXXFLAGS` to allow the invalid
    code to be accepted, but do note that this may also mask other
    problems so should not be used unless strictly needed.

:program:`cmake` build configuration
------------------------------------

:program:`cmake` supports configuration of the build using many
different environment variables and options; for a full list, see the
`cmake reference documentation
<http://www.cmake.org/cmake/help/documentation.html>`_.  The following
environment variables are commonly needed:

:envvar:`CMAKE_INCLUDE_PATH`
    directories to be searched for include files, for example

    .. parsed-literal::

        /opt/Ice-|iceversion|/include

    A ``:`` or ``;`` separator character is used to separate
    directories, depending on the platform.

:envvar:`CMAKE_LIBRARY_PATH`
    directories to be searched for libraries, for example

    .. parsed-literal::

        /opt/Ice-|iceversion|/lib

    Directories are separated by ``:`` or ``;`` as with
    :envvar:`CMAKE_INCLUDE_PATH`.

:envvar:`CXX`
    C++ compiler executable. Useful with `ccache <http://ccache.samba.org/>`_.

:envvar:`CXXFLAGS`
    C++ compiler flags.

:envvar:`ICE\_HOME`
    your Ice installation.  This directory must contain a
    :file:`slice` subdirectory with the Slice language include files
    within it.  Note that the :file:`include` and :file:`lib`
    subdirectories will not be automatically searched; these *must* be
    specified using :envvar:`CMAKE_INCLUDE_PATH` and
    :envvar:`CMAKE_LIBRARY_PATH`.

:envvar:`VERBOSE`
    if set to `1`, show the actual build commands rather than the
    pretty "Compiling XYZ..." statements.

:program:`Visual Studio` configuration
--------------------------------------

:program:`cmake` has full support for :program:`Visual Studio`.
Windows users building with :program:`Visual Studio` will also need to
run the :program:`Visual Studio` environment setup scripts:

::

    C:\Documents and Settings\USER>c:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat
    Setting environment for using Microsoft Visual Studio 2010 x86 tools.

or otherwise guarantee that the environment is properly configured.
For a 64-bit build, be sure to use the right setup, for example
:menuselection:`Start-->Microsoft Visual Studio 2010-->Visual Studio
Tools-->Visual Studio x64 Win64 Command Prompt`.  With a suitable
command prompt, run:

::

    cmake -G "Visual Studio 10 Win64" [cmake options] /path/to/openmicroscopy/components/tools/OmeroCpp

This is for a 64-bit :program:`Visual Studio 2010` build.  Modify appropriately
for other versions and compilers.  Running

::

    cmake --help

will list the available generators for your platform (without the
`Win64` suffix).  Make sure that the :program:`Visual Studio` command
prompt matches the generator chosen.

Once :program:`cmake` has finished running, the generated project and solution
files may be then opened in :program:`Visual Studio`, or built directly using
the :program:`msbuild` command-line tool.

.. note::

    It may be necessary to specify ``/Zm1000`` as an additional
    compiler setting.

Installing the library
----------------------

If using :program:`make`, run:

::

    make [DESTDIR=/path/to/staging/directory] install

If using another build system, please invoke the equivalent install
target for that system.

Using the library
-----------------

To use |OmeroCpp| it is necessary to point your compiler and linker at
the mentioned directories above. A simple GNU :program:`make`
:file:`Makefile` might look like this:

.. literalinclude:: ../examples/omerocpp/Makefile
   :language: make
   :linenos:

A trivial example: :file:`yourcode.cpp`
---------------------------------------

And a simple example file might looking something like the following:

.. literalinclude:: ../examples/omerocpp/yourcode.cpp
   :language: c++
   :linenos:

This code does not do much. It creates a server session, loads a few
services, and prints the user's name. For serious examples, see
|OmeroClients|.

Compiling and running your code
-------------------------------

To compile and run :program:`yourcode`, download the two files above
(:file:`Makefile` and :file:`yourcode.cpp`) and then in a shell:

::

    make OMERO_DIST=dist yourcode
    LD_LIBRARY_PATH=dist/lib ./yourcode --Ice.Config=dist/etc/ice.config

where you have edited :file:`dist/etc/ice.config` to contain the
values:

::

    omero.host=localhost
    omero.user=your_name
    omero.pass=your_password

Alternatively, you can pass these on the command-line:

::

    LD_LIBRARY_PATH=dist/lib ./yourcode omero.host=localhost --omero.user=foo --omero.pass=bar

.. note::

    This example explains how to run on Linux only. For doing the
    same on MacOS X, change all instances of
    :envvar:`LD\_LIBRARY\_PATH` to :envvar:`DYLD\_LIBRARY\_PATH`.

Further information
-------------------

For the details behind writing, configuring, and executing a client,
please see |OmeroClients|.

.. seealso::

    Ice_, |OmeroGrid|, |OmeroApi|, :doc:`/developers/build-system`,
    :ticket:`1596` which added 64-bit support

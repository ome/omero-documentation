EM Preview Functionality
========================

Table of Contents
^^^^^^^^^^^^^^^^^

#. `EMAN2 <#EMAN2>`_

   #. `EMAN2 Client Scripts <#EMAN2ClientScripts>`_

      #. `eman2omero.py <#eman2omero.py>`_
      #. `omero2em.py <#omero2em.py>`_

   #. `EMAN2 Server Scripts <#EMAN2ServerScripts>`_

      #. `Eman\_Filters.py <#Eman_Filters.py>`_
      #. `Auto\_Boxer.py <#Auto_Boxer.py>`_
      #. `Images\_From\_ROIs.py <#Images_From_ROIs.py>`_
      #. `Ctf\_Correction.py <#Ctf_Correction.py>`_
      #. `Save\_Image\_As\_Em.py export2em.py
         openInChimera.py <#Save_Image_As_Em.pyexport2em.pyopenInChimera.py>`_

#. `Spider <#Spider>`_

   #. `Spider Client Scripts <#SpiderClientScripts>`_

      #. `spider2omero.py <#spider2omero.py>`_
      #. `omero2spider.py <#omero2spider.py>`_

   #. `Spider Server Scripts <#SpiderServerScripts>`_

      #. `Run\_Spider\_Procedure.py <#Run_Spider_Procedure.py>`_

This page describes preliminary efforts to support Electron Microscopy
workflows in OMERO. We have focused on interactions between OMERO and
existing Single Particle Analysis software, EMAN2 and Spider. These
interactions fall into 2 main categories:

-  Data (and metadata) exchange between OMERO and EM software.
-  Adding EMAN2 and Spider functionality to OMERO for image processing
   on the server.

You can view a :snapshot:`demonstration movie
<movies/omero-4-2/mov/Scripting4.mov>` of server-side processing with
this workflow, and more demo movies on the :plone:`features page
<products/feature-list>`.  All of the work described below makes use
of Python scripts to connect EMAN2 and Spider functionality to OMERO
(see `OmeroPy </ome/wiki/OmeroPy>`_). Scripts that upload or download
EM data to and from the OMERO server are run on the client and require
EMAN2 and/or Spider installed on the client. Other scripts that
process images on the OMERO server are run on the server itself, using
the `OMERO scripting service
</ome/wiki/OmeroPy/ScriptingServiceGuide>`_ and require the server
admin to install EMAN2 / Spider on the server.

Using EM software to process data on the OMERO server has the advantage
that no image data has to be transferred down the wire from the server
to client and back.

Although this functionality was announced at the time of OMERO 4.2
release, it is still at an early stage and the scripts are not included
as 'built-in' functionality in the OMERO software. However, they can be
added by the following steps, described in more detail below.

**Client Scripts**

-  Make sure you have EMAN2/Spider installed
-  Get the script (see links below)
-  Run script from command line (enter user-name and password to connect
   to OMERO)

**Server Scripts**

-  Install EMAN2/Spider on OMERO server (admin)
-  Get the script and install on server (admin)
-  Run the script from the OMERO.insight client

The scripts can be downloaded by following the links provided below,
look for 'Download in other formats' at the bottom of the page and click
on 'Original Format' or 'Plain Text'. Installation instructions are in
the `scripting service
guide </ome/wiki/OmeroPy/ScriptingServiceGuide>`_. It is also possible
to modify or create your own scripts using these scripts as examples.
This allows users to tailor the functionality to their requirements. See
the `scripting service guide </ome/wiki/OmeroPy/ScriptingServiceGuide>`_
for more details on how to develop and test your own scripts.

EMAN2
-----

Most of the examples below have been developed and tested with data
available from the ` EMAN2 tutorials
page <http://blake.bcm.edu/emanwiki/EMAN2/Tutorials>`_. This includes
data generated by following the 'Single Particle Reconstruction'
tutorial on that page.

Here are links for
` Download <http://ncmi.bcm.edu/ncmi/software/software_details?selected_software=counter_222>`_
and ` Install
Instructions <http://blake.bcm.tmc.edu/emanwiki/EMAN2/Install>`_ for
EMAN2 on all 3 platforms.

EMAN2 Client Scripts
~~~~~~~~~~~~~~~~~~~~

eman2omero.py
^^^^^^^^^^^^^

This script is designed to upload images from an EMAN2 bdb database or
folder to an OMERO server. It can be used to upload a single directory
of images in ` EMAN2-supported
formats <http://blake.bcm.edu/emanwiki/EMAN2ImageFormats>`_, a single
bdb of images or multiple bdbs of images in a folder structure generated
by the Single Particle Reconstruction workflow. Download
`source:ome.git/components/tools/OmeroPy/scripts/EMAN2/eman2omero.py </ome/browser/ome.git/components/tools/OmeroPy/scripts/EMAN2/eman2omero.py>`_
then run it from the command line like this:

::

    $ python eman2omero.py -h hostname -u username -p password -b bdb

where:

-  hostname is the server location. E.g. omero.openmicroscopy.org.uk
-  username is your login name
-  password is your login password
-  bdb is the path of a folder OR bdb database containing images. E.g.
   /Users/will/EMAN-data/ OR bdb:myData/images#particles. See the script
   itself for more details and examples.

omero2em.py
^^^^^^^^^^^

This script downloads images from an OMERO server and uses EMAN2 on the
client to write the files to disk in ` EMAN2-supported
formats <http://blake.bcm.edu/emanwiki/EMAN2ImageFormats>`_. Download
`source:ome.git/components/tools/OmeroPy/scripts/EMAN2/omero2em.py </ome/browser/ome.git/components/tools/OmeroPy/scripts/EMAN2/omero2em.py>`_
then run it from the command line like this:

::

    $ python omero2em.py -h hostname -u username -p password -b datasetID -e extension -o output-folder

    E.g. $ python omero2em.py -h localhost -u root -p omero -d 901 -e tif -o /Users/will/Desktop/EMAN-export/ctf/

where:

-  d is the ID of an OMERO dataset containing images you want to
   download. You can also use -i to specify the ID of a single image to
   download.
-  e is the file extension of the format you want to save locally. See
   the ` full list <http://blake.bcm.edu/emanwiki/EMAN2ImageFormats>`_.
-  o is the local folder where you want to save the images. This folder
   should already exist before running the script.

N.B. If the image in OMERO has multiple channels or time-points, only
the first channel and time-point will be exported.

EMAN2 Server Scripts
~~~~~~~~~~~~~~~~~~~~

EMAN2 must be installed on the server and the scripts below must be
installed on the server as described in the `Scripting Service
Guide </ome/wiki/OmeroPy/ScriptingServiceGuide>`_.

Eman\_Filters.py
^^^^^^^^^^^^^^^^

The
`source:ome.git/components/tools/OmeroPy/scripts/EMAN2/Eman\_Filters.py </ome/browser/ome.git/components/tools/OmeroPy/scripts/EMAN2/Eman_Filters.py>`_
script processes images on the OMERO server using any of the ` EMAN2
filters listed <http://blake.bcm.edu/eman2/processors.html>`_.

Parameters:

-  List of Image-IDs (list of integers)..OR...
-  Dataset-ID. Use this OR list of image-IDs to specify images to
   process
-  filterName: The name of the filter, see link above. E.g.
   "filter.lowpass.gauss"
-  filterParams (optional): A map of any additional filter parameters.
   E.g. "sigma": O.25
-  newDatasetName (optional): If this is specified, the results will be
   placed in a new dataset.

Auto\_Boxer.py
^^^^^^^^^^^^^^

The
`source:ome.git/components/tools/OmeroPy/scripts/EMAN2/Auto\_Boxer.py </ome/browser/ome.git/components/tools/OmeroPy/scripts/EMAN2/Auto_Boxer.py>`_
script uses EMAN2 to auto-pick particles from a Single-Particle
micrograph, using one or more user-picked particles. Particles can be
added to an image using the OMERO.insight measurement tool. Particle
ROIs drawn by the user need only be approximate in size. They will be
re-sized to ` optimum box
sizes <http://blake.bcm.edu/emanwiki/EMAN2/BoxSize>`_ by the script, or
can be specified in the script parameters (see below). This script has
been tested with ` this
image <http://trac.openmicroscopy.org.uk/omero/attachment/wiki/EmPreviewFunctionality/boxerTest.tiff>`_
from this ` AMI
dataset <http://ami.scripps.edu/experiment/dbem/3wviewer.php?expId=3956>`_.

Steps:

-  Pick one or more particles by adding Rectangles with the measurement
   tool.
-  Run the script, passing it the Image IDs of images to pick particles.
-  The boxer script will pick additional particles and save them as ROIs
   on the image.
-  You are free to pick additional particles and run the script again.
-  Once you are happy with the particles selected, you can use the
   `source:ome.git/components/tools/OmeroPy/scripts/omero/util\_scripts/Images\_From\_ROIs.py </ome/browser/ome.git/components/tools/OmeroPy/scripts/omero/util_scripts/Images_From_ROIs.py>`_
   script to generate the particle images (see below)

Parameters:

-  List of Image-IDs (list of integers)
-  Box size (integer, optional)

Images\_From\_ROIs.py
^^^^^^^^^^^^^^^^^^^^^

The
`source:ome.git/components/tools/OmeroPy/scripts/omero/util\_scripts/Images\_From\_ROIs.py </ome/browser/ome.git/components/tools/OmeroPy/scripts/omero/util_scripts/Images_From_ROIs.py>`_
script does not require EMAN2 or Spider. It simply processes Rectangle
ROIs (E.g. particles) from a list of images and makes new images from
the pixel data within the ROIs.

Parameters:

-  List of Image-IDs
-  makeParticleStack (optional, default is 'false'): If true, put all
   the particles from a parent image into a single image stack. If not,
   create a new single plane image for each ROI and put into a new
   dataset.
-  containerName (optional, default is 'particles'): The name of the new
   image stack or dataset of particles. E.g. if container-name is
   'particles', a new image stack or dataset of particles generated from
   an image 'myImage.mrc' would be named 'myImage.mrc\_particles'.

Ctf\_Correction.py
^^^^^^^^^^^^^^^^^^

The
`source:ome.git/components/tools/OmeroPy/scripts/EMAN2/Ctf\_Correction.py </ome/browser/ome.git/components/tools/OmeroPy/scripts/EMAN2/Ctf_Correction.py>`_
script uses the EMAN2 ` e2ctf.py
command <http://blake.bcm.edu/emanwiki/EMAN2/Programs/e2ctf>`_ to
perform ctf correction on OMERO images. Results are saved as new images
on the OMERO server.

This script will use all the images provided to estimate a single
defocus value.

Parameters:

-  Datatype: This will be 'Image' if you want to specify images by
   Image\_ID or 'Dataset' to process all the images in a dataset.
-  IDs: A list of the Image\_IDs you want to process or a
   Dataset\_ID(s). All images processed together.
-  voltage: Voltage in Kv. E.g. 120
-  cs: Coefficient of Spherical abherration. E.g. 1.0
-  apix: Angstroms per pixel. E.g. 0.82
-  oversamp (optional): Argument to pass to ctf command. E.g.
   --oversamp=1
-  ac (optional): Argument to pass to ctf command. E.g. --ac=10.0
-  autohp (optional): If true, add --autohp to command arg

Save\_Image\_As\_Em.py export2em.py openInChimera.py
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The
`source:ome.git/components/tools/OmeroPy/scripts/EMAN2/Save\_Image\_As\_Em.py </ome/browser/ome.git/components/tools/OmeroPy/scripts/EMAN2/Save_Image_As_Em.py>`_
script uses EMAN2 on the server to convert OMERO images into EM format
images. It makes the EM images available for download from the server by
saving them as Original Files and returns the Original File IDs. A
companion client-side script
`source:ome.git/components/tools/OmeroPy/scripts/EMAN2/export2em.py </ome/browser/ome.git/components/tools/OmeroPy/scripts/EMAN2/export2em.py>`_
can be used to run the 'Save\_Image\_As\_Em.py' script and download the
resulting EM files to the client.

Available file extensions are the ` EMAN2-supported
formats <http://blake.bcm.edu/emanwiki/EMAN2ImageFormats>`_.

Example usage, for exporting all the images in dataset ID: 901 as Spider
(spi) files to the given directory.

::

    $ python export2em.py -h localhost -u root -p omero -d 901 -e spi -o /Users/will/Desktop/EMAN-export/Spider/

Example, for exporting a single image, by image-id to the current
folder, in mrc format

::

    $ python export2em.py -h localhost -u root -p omero -i 235 -e mrc

These scripts together offer similar functionality to the client-side
'omero2em.py' script described above: The difference being that
'Save\_Image\_As\_Em.py' uses EMAN2 on the server so you don't need
EMAN2 on the client to export files with the 'export2em.py' command.

Another client-side script that makes use of 'Save\_Image\_As\_Em.py' on
the server is
`source:ome.git/components/tools/OmeroPy/scripts/EMAN2/openInChimera.py </ome/browser/ome.git/components/tools/OmeroPy/scripts/EMAN2/openInChimera.py>`_.
This script downloads a single image in mrc format and calls Chimera on
the command-line to open the mrc image in Chimera (requires Chimera to
be installed on the client machine). This script also attempts to set
the colour of the map in Chimera according to the OMERO rendering
settings. Therefore, if a multi-channel image is chosen from OMERO,
multiple mrc files are downloaded (one per channel) and overlaid in
Chimera.

Example usage: This will download image with ID 151 as an mrc file(s) to
the specified output directory and then open Chimera via the
command-line.

::

    $ python openInChimera.py -h localhost -u root -p omero -i 151 -o /Users/will/Desktop/Chimera/

Spider
------

Spider is available for Mac OSX and Linux platforms. Visit the ` Spider
web site <http://www.wadsworth.org/spider_doc/spider/docs/spider.html>`_
for download and install instructions. A sample
` data-set <http://www.wadsworth.org/spider_doc/spider/docs/protocol_download.html>`_
is available, but this is very large (don't try and import it all in a
hurry).

Spider Client Scripts
~~~~~~~~~~~~~~~~~~~~~

spider2omero.py
^^^^^^^^^^^^^^^

The
`source:ome.git/components/tools/OmeroPy/scripts/EMAN2/spider2omero.py </ome/browser/ome.git/components/tools/OmeroPy/scripts/EMAN2/spider2omero.py>`_
script uses Spider on the client machine to read spider files from a
local file hierarchy and upload to OMERO, creating a dataset
corresponding to each directory.

Example usage: This will log-on to OMERO using the host, username and
password given, and upload all the Spider image files in the given
directory and sub-directories.

::

    python spider2omero.py -h localhost -u root -p omero -d /Users/will/Documents/data/SPIDER/

omero2spider.py
^^^^^^^^^^^^^^^

The
`source:ome.git/components/tools/OmeroPy/scripts/EMAN2/omero2spider.py </ome/browser/ome.git/components/tools/OmeroPy/scripts/EMAN2/omero2spider.py>`_
script reads images from an OMERO server and uses Spider on the client
to save them as local Spider images. N.B. If the image in OMERO has
multiple channels or time-points, only the first channel and time-point
will be exported.

Example usage: Downloading images from dataset ID 901 as .dat files
(default) to the specified output directory

::

    wjm:EMAN2 will$ python omero2spider.py -h localhost -u root -p omero -d 901 -o /Users/will/Desktop/Spider-export/

Example usage: Downloading images from image ID 3571 as a .spi file to
the current directory

::

    wjm:EMAN2 will$ python omero2spider.py -h localhost -u root -p omero -i 3571 -e spi

Spider Server Scripts
~~~~~~~~~~~~~~~~~~~~~

Run\_Spider\_Procedure.py
^^^^^^^^^^^^^^^^^^^^^^^^^

The
`source:ome.git/components/tools/OmeroPy/scripts/EMAN2/runSpiderProcedure.py </ome/browser/ome.git/components/tools/OmeroPy/scripts/EMAN2/runSpiderProcedure.py>`_
script allows a Spider procedure file to be run on the OMERO server to
process images. WARNING: There are potential security issues with
allowing users to upload arbitrary Spider scripts and run them on the
server. For example, a malicious script could attempt to use the
'Delete' command in Spider to delete files on the server, although they
would have to be .dat files, since the script only processes .dat
images. This script is provided more as a proof-of-principle and should
be deployed amongst trusted users only.

The intended workflow for use of this script is:

-  Create a Spider Procedure Text file, E.g. see 'Running Procedure
   Files' on ` this
   page <http://www.wadsworth.org/spider_doc/spider/docs/quickstart.html#SPIDER>`_
   . The name is not important (Example below)
-  Upload the file to the server using the Insight client, E.g attach to
   a dataset. View the file under the 'Attachments' tab and note it's
   File ID.
-  Run the 'Run\_Spider\_Procedure.py' script, passing it the File ID,
   and other parameters (below).

Example Spider Procedure File. Note, the input image is "input" and
output is "win001".

::

    RT
    input     ; The input image
    rot001    ; The output image
    60        ; Rotation angle (in degrees)

    IP
    rot001    ; Input image
    big001    ; Output image
    150,150   ; New dimensions

    WI
    big001    ; Input image
    win001    ; Output image
    75,75     ; Size of the window
    1,75      ; Top left coordinates

    EN D

Script Parameters:

-  imageIds: List of images you want to process OR use datasetId
-  datasetId: Process images from this dataset OR use imageIds
-  spfFileId: The File ID of the Spider Procedure File.
-  newDatasetName (optional): If you want the result images in a new
   dataset (otherwise they will be in the same dataset as the input
   images.
-  inputName (optional). This should match the 'input' name in the
   Spider procedure file. Default is 'input' so if you procedure file
   has 'input' as in the above example, you don't need this parameter.
-  outputName (optional): This should match the 'output' name in the
   Spider procedure file. E.g 'win001' in the above example. Default is
   'output'.

Attachments
~~~~~~~~~~~

-  `boxerTest.tiff </ome/attachment/wiki/EmPreviewFunctionality/boxerTest.tiff>`_
   `|Download| </ome/raw-attachment/wiki/EmPreviewFunctionality/boxerTest.tiff>`_
   (16.0 MB) - added by *wmoore* `2
   years </ome/timeline?from=2010-04-23T11%3A01%3A05%2B01%3A00&precision=second>`_
   ago. Test image for boxer.py script

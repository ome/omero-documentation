Storage of Client Side External Analysis Data
=============================================

*Created by: sheldons last modification: Monday 24 of October, 2005
[17:19:40 UTC]*

I. Background
-------------

In the process of trying to achieve the goals of client-side external
analysis and viewing of semantic data, we need to be able to store the
data created by third party modules, such as Cell Profiler, into the OME
server. The following design provides a sufficient method to persist
data created on the client by an external analysis module, while
satisfying our requirements.

The simplest use case for external data storage occurs when an OME user
chooses to run an analysis on a specific image or set of images. When an
analysis module is executed on a given data set, it generates a set of
outputs and intermediary outputs. The OME user will want to associate
this data with the images or set of images, to persist the data on the
OME server. The requirements generated by this base case should cover
any similar variants.

II. Requirements
----------------

This storage of data presents a design problem when choosing what data
should be stored on the OME server, since we can choose to store all, a
subset, or none of the client-side analysis data. Each situation has a
unique set of issues related to them; but, in all cases, we have several
requirements that need to be satisfied.

First, we need to maintain the OME data model for semantic type
definitions – which requires that data stored on the server is
associated with a specific semantic type that is well defined and
universally interpretable.

Secondly, an OME user must be able to store data on the server. Without
this capability, we would diminish any added value of providing
client-side external analysis to OME.

Thirdly, all of the data must be persisted through some means to enable
future analysis by either the same analysis module, or another module.
Similarly, it should be viewable in either a generic browser or through
specialized data viewers specific to the analysis modules.

Finally, the process for persisting and retrieving data should keep the
topology of the OME client-server architecture in mind, such that it
will not diminish performance or usability.

III. Design
-----------

We approach this problem by looking at each of the varying levels of
data storage, whether it involves storing none, all, or a subset of the
data. Then we will identify the impact of each solution and evaluate how
well it will satisfy our requirements.

The first case, where no data is stored on the server, fails our
requirement for allowing a user to store external analysis data. In the
opposite extreme, we have our second case of storing all of the analysis
data on the server. This second case satisfies most of the requirements,
but presents several additional problems. For one, modules such as Cell
Profiler can generate an enormous amount of data that is not necessarily
useful to persist on the server. This data can be very module specific,
such as Cell Profiler’s association between filenames and image data.
This data is obviously not useful to anything but Cell Profiler, since
the OME association of images and files on the image server will
supersede the data that comes from Cell Profiler.

Also, this generated data can contain a significant amount of
intermediary data, which could be used for more analysis or viewed by a
client, but is often not very important to other OME users. There would
also be a significant amount of data flowing to and from the server for
the simplest of operations, which may lead to potential performance
issues. This could potentially degrade both performance and usability,
failing our last requirement.

Finally, for every specific type of data that gets stored on the server,
there must be a pre-defined semantic type, or a new semantic type must
be created. This can lead to a flood of semantic types that may be too
narrowly focused, and fail to maintain the universality of meaning for a
semantic type.

In the third case, we may choose to persist a subset of the data created
by an analysis module. This would involve extracting specific data from
the set of results to associate with well known, or newly created,
semantic types that can be universally interpreted. This subset of data
will then be stored on the server as semantic types through the API
established by the OME server. This case allows for the association of
data with images and the persistence of shareable data on the OME
server. In doing so, this satisfies the OME model for semantic types.

This last case does not persist all data, including intermediary data,
which can be used by future analysis or viewed by specialized viewers on
the client. We can augment this case to handle the storage of remaining
data in either a specialized format on the client, or within a uniform
data persistence layer. This would allow for maximum flexibility and
satisfy our requirements. In order to reference the data that is being
stored locally on a client, we can simply store a semantic type called
"ExternalData?" that contains a pointer interpretable by the OME client.
The pointer will enable the client to find localized data.

We can suitably insure that the final requirement for performance and
usability is kept in consideration by maintaining hybrid storage, on
both client and server, and by finding a suitable balance between the
data being stored as semantic types to the OME server.

IV. Conclusion
--------------

We have come up with a solution that should satisfactorily solve our
problem given our requirements – only storing universally interpretable
semantic types on the server, insuring all relevant data that should be
public is stored on the server as semantic types, and persisting data
generated by an analysis module in some manner.

Intermediary data created by an external analysis module will be stored
in a locally accessible mechanism on the client, allowing for future
client-side analysis. Only a subset of the data generated will be stored
on the OME server as recognizable semantic types. If external analysis
data is created and stored locally, we will store a pointer to that data
in the form of a semantic type, so that we can reference that data in
the future.

--------------

Comments
========

**jason on: Fri 28 of Oct, 2005 [20:11 UTC] This all looks fine-- thanks
for this. Some brief comments:**

1) In general, I assume this all keeps the major OME analysis concepts
implicit-- each "analysis" gets a unique ID, that distinguishes it from
all others.

2) Imported analytic data must be linked to existing data within an OME
instance-- e.g., Images or Pixels-- via unique IDs. Thus a user must
have these available, probably via a .csv or .xls file that is exported
from OME instance for an external (i.e., not within OME) "merge" with
analytic results. The merged file is then imported back into OME
instance.

3) I can't think of a reason why we will need locks or versioning for
such analysis-- is there a use case where two (or more) users analyse
the same data in different ways and then all import data in a "single"
analysis??? This goes back to the multiple container issue, but we might
have to provide a facility for developing analysis containers that are
not Chains. This might be just a JOIN, but I am not sure. Sorry,
slightly off topic.
